#!/usr/bin/env node
import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { CallToolRequestSchema, ListToolsRequestSchema, } from "@modelcontextprotocol/sdk/types.js";
import * as dotenv from "dotenv";
import path from "path";
import { fileURLToPath } from "url";
import axios from 'axios';
import * as fs from 'fs';
import FormData from 'form-data';
// Configure dotenv to load from local .env file
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
console.log('üöÄ Starting malware scan server...');
console.log(`üìÅ Loading environment from: ${path.resolve(__dirname, '..', '.env')}`);
dotenv.config({ path: path.resolve(__dirname, '..', '.env') });
// API Keys from environment variables
const VT_API_KEY = process.env.VT_API_KEY;
const HA_API_KEY = process.env.HA_API_KEY;
if (!VT_API_KEY || !HA_API_KEY) {
    console.error("‚ùå Error: VT_API_KEY and HA_API_KEY environment variables are required");
    process.exit(1);
}
console.log('‚úÖ API keys loaded successfully');
// Tool definitions
const VIRUSTOTAL_SCAN_TOOL = {
    name: "virustotal_scan",
    description: "Scans a file using VirusTotal's API to detect malware and other threats. " +
        "Provides detailed analysis from multiple antivirus engines. " +
        "Returns scan results including detection statistics.",
    inputSchema: {
        type: "object",
        properties: {
            file_path: {
                type: "string",
                description: "Path to the file to scan"
            }
        },
        required: ["file_path"]
    }
};
const HYBRID_ANALYSIS_TOOL = {
    name: "hybrid_analysis_scan",
    description: "Performs dynamic analysis of files using Hybrid Analysis sandbox environment. " +
        "Provides detailed behavioral analysis and threat detection. " +
        "Returns comprehensive analysis report including system behavior.",
    inputSchema: {
        type: "object",
        properties: {
            file_path: {
                type: "string",
                description: "Path to the file to scan"
            },
            environment_id: {
                type: "number",
                description: "Environment ID for analysis (default: 140 - Windows 10 64-bit)",
                default: 140
            }
        },
        required: ["file_path"]
    }
};
async function scanWithVirusTotal(filePath) {
    try {
        console.log(`üì§ Starting VirusTotal scan for file: ${filePath}`);
        console.log(`üìä File size: ${(fs.statSync(filePath).size / 1024 / 1024).toFixed(2)} MB`);
        // Upload file
        console.log('üîÑ Uploading file to VirusTotal...');
        const form = new FormData();
        form.append('file', fs.createReadStream(filePath));
        const uploadResponse = await axios.post('https://www.virustotal.com/api/v3/files', form, {
            headers: {
                ...form.getHeaders(),
                'x-apikey': VT_API_KEY,
            },
        });
        const analysisId = uploadResponse.data.data.id;
        console.log(`‚úÖ File uploaded to VirusTotal successfully`);
        console.log(`üìã Analysis ID: ${analysisId}`);
        // Poll for results
        const url = `https://www.virustotal.com/api/v3/analyses/${analysisId}`;
        let attempts = 0;
        const maxAttempts = 30; // 5 minutes maximum wait time
        while (attempts < maxAttempts) {
            console.log(`üîÑ Polling attempt ${attempts + 1}/${maxAttempts}`);
            const response = await axios.get(url, {
                headers: { 'x-apikey': VT_API_KEY },
            });
            const { status, stats } = response.data.data.attributes;
            console.log(`üìä Current status: ${status}`);
            if (status === 'completed') {
                console.log('‚úÖ VirusTotal scan completed successfully');
                console.log(`üìä Results - Malicious: ${stats.malicious}, Suspicious: ${stats.suspicious}, Harmless: ${stats.harmless}`);
                return `VirusTotal Scan Results:
- Malicious: ${stats.malicious}
- Suspicious: ${stats.suspicious}
- Harmless: ${stats.harmless}
- Undetected: ${stats.undetected}
- Timeout: ${stats.timeout}

View full results at: https://www.virustotal.com/gui/file/${analysisId}`;
            }
            console.log('‚è≥ VirusTotal scan in progress... retrying in 10 seconds');
            await new Promise(resolve => setTimeout(resolve, 10000));
            attempts++;
        }
        console.log('‚ö†Ô∏è VirusTotal scan timed out');
        return "VirusTotal scan timed out after 5 minutes. Please check results manually using the analysis ID: " + analysisId;
    }
    catch (error) {
        console.error('‚ùå VirusTotal scan error:', error.response?.data?.error?.message || error.message);
        throw new Error(`VirusTotal scan failed: ${error.response?.data?.error?.message || error.message}`);
    }
}
async function scanWithHybridAnalysis(filePath, environmentId = 140) {
    try {
        console.log(`üì§ Starting Hybrid Analysis scan for file: ${filePath}`);
        console.log(`üñ•Ô∏è Using environment ID: ${environmentId}`);
        console.log(`üìä File size: ${(fs.statSync(filePath).size / 1024 / 1024).toFixed(2)} MB`);
        // Upload file
        console.log('üîÑ Uploading file to Hybrid Analysis...');
        const form = new FormData();
        form.append('file', fs.createReadStream(filePath));
        form.append('environment_id', environmentId.toString());
        const uploadResponse = await axios.post('https://www.hybrid-analysis.com/api/v2/submit/file', form, {
            headers: {
                ...form.getHeaders(),
                'api-key': HA_API_KEY,
                'User-Agent': 'Hybrid-Analysis-MCP-Server',
            },
        });
        const { job_id, sha256 } = uploadResponse.data;
        console.log('‚úÖ File uploaded to Hybrid Analysis successfully');
        console.log(`üìã Job ID: ${job_id}`);
        console.log(`üîë SHA256: ${sha256}`);
        // Wait for initial analysis
        console.log('‚è≥ Waiting for initial analysis...');
        await new Promise(resolve => setTimeout(resolve, 5000));
        // Get analysis results
        let attempts = 0;
        const maxAttempts = 30; // 5 minutes maximum wait time
        while (attempts < maxAttempts) {
            try {
                console.log(`üîÑ Polling attempt ${attempts + 1}/${maxAttempts}`);
                const response = await axios.get(`https://www.hybrid-analysis.com/api/v2/report/${job_id}/summary`, {
                    headers: {
                        'api-key': HA_API_KEY,
                        'User-Agent': 'Hybrid-Analysis-MCP-Server',
                    },
                });
                console.log('‚úÖ Hybrid Analysis scan completed successfully');
                return `Hybrid Analysis Results:
- Analysis complete
- SHA256: ${sha256}
- View full results at: https://www.hybrid-analysis.com/sample/${sha256}

Summary:
${JSON.stringify(response.data, null, 2)}`;
            }
            catch (error) {
                console.log('‚è≥ Hybrid Analysis scan in progress... retrying in 10 seconds');
                await new Promise(resolve => setTimeout(resolve, 10000));
                attempts++;
            }
        }
        console.log('‚ö†Ô∏è Hybrid Analysis scan timed out');
        return "Hybrid Analysis scan timed out after 5 minutes. Please check results manually using SHA256: " + sha256;
    }
    catch (error) {
        console.error('‚ùå Hybrid Analysis scan error:', error.response?.data?.message || error.message);
        throw new Error(`Hybrid Analysis scan failed: ${error.response?.data?.message || error.message}`);
    }
}
// Server implementation
const server = new Server({
    name: "malware-scan",
    version: "0.1.0",
}, {
    capabilities: {
        tools: {},
    },
});
// Tool handlers
server.setRequestHandler(ListToolsRequestSchema, async () => {
    console.log('üìã Listing available tools');
    return {
        tools: [VIRUSTOTAL_SCAN_TOOL, HYBRID_ANALYSIS_TOOL],
    };
});
server.setRequestHandler(CallToolRequestSchema, async (request) => {
    try {
        console.log(`üîß Tool request received for: ${request.params.name}`);
        const { name, arguments: args } = request.params;
        if (!args || typeof args !== "object") {
            console.error('‚ùå No arguments provided for tool request');
            throw new Error("No arguments provided");
        }
        switch (name) {
            case "virustotal_scan": {
                if (!("file_path" in args) || typeof args.file_path !== "string") {
                    console.error('‚ùå Invalid file_path argument for VirusTotal scan');
                    throw new Error("Invalid file_path argument");
                }
                console.log(`üöÄ Starting VirusTotal scan for: ${args.file_path}`);
                const results = await scanWithVirusTotal(args.file_path);
                return {
                    content: [{ type: "text", text: results }],
                    isError: false,
                };
            }
            case "hybrid_analysis_scan": {
                if (!("file_path" in args) || typeof args.file_path !== "string") {
                    console.error('‚ùå Invalid file_path argument for Hybrid Analysis scan');
                    throw new Error("Invalid file_path argument");
                }
                const environmentId = ("environment_id" in args && typeof args.environment_id === "number")
                    ? args.environment_id
                    : 140;
                console.log(`üöÄ Starting Hybrid Analysis scan for: ${args.file_path}`);
                const results = await scanWithHybridAnalysis(args.file_path, environmentId);
                return {
                    content: [{ type: "text", text: results }],
                    isError: false,
                };
            }
            default:
                console.error(`‚ùå Unknown tool requested: ${name}`);
                return {
                    content: [{ type: "text", text: `Unknown tool: ${name}` }],
                    isError: true,
                };
        }
    }
    catch (error) {
        console.error('‚ùå Error handling tool request:', error);
        return {
            content: [
                {
                    type: "text",
                    text: `Error: ${error instanceof Error ? error.message : String(error)}`,
                },
            ],
            isError: true,
        };
    }
});
async function runServer() {
    try {
        console.log('üöÄ Initializing malware scan server...');
        const transport = new StdioServerTransport();
        await server.connect(transport);
        console.log('‚úÖ Malware Scan MCP Server running on stdio');
    }
    catch (error) {
        console.error('‚ùå Failed to initialize server:', error);
        throw error;
    }
}
runServer().catch((error) => {
    console.error("‚ùå Fatal error running server:", error);
    process.exit(1);
});
//# sourceMappingURL=index.js.map